/*
	To build use the following gcc statement 
	(assuming you have the d2xx library in the /usr/local/lib directory).
	gcc -o write main.c -L. -lftd2xx -Wl,-rpath,/usr/local/lib
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/time.h>
#include <ftd2xx.h>

static FT_PROGRAM_DATA Data = {
	0x00000000,                 // Header - must be 0x00000000
	0xFFFFFFFF,                 // Header - must be 0xffffffff
	3,                          // Header - FT_PROGRAM_DATA version
	0x0403,                     // VID
	0x6010,                     // PID
	"FTDI",                     // Manufacturer
	"FT",                       // Manufacturer ID
	"C26AIC02",				// Description
	"CABIN26AIC02",                 // Serial Number
	500,                        // MaxPower
	1,                          // PnP
	0,                          // SelfPowered
	0,                          // RemoteWakeup
	0,                          // non-zero if Rev4 chip, zero otherwise
	0,                          // non-zero if in endpoint is isochronous
	0,                          // non-zero if out endpoint is isochronous
	0,                          // non-zero if pull down enabled
	1,                          // non-zero if serial number to be used
	1,                          // non-zero if chip uses USBVersion
	0x0200,                     // BCD (0x0200 => USB2)
	//
	// FT2232C extensions (Enabled if Version = 1 or greater)
	//
	1,                          // non-zero if Rev5 chip, zero otherwise
	0,                          // non-zero if in endpoint is isochronous
	0,                          // non-zero if in endpoint is isochronous
	0,                          // non-zero if out endpoint is isochronous
	0,                          // non-zero if out endpoint is isochronous
	0,                          // non-zero if pull down enabled
	0,                          // non-zero if serial number to be used
	255,                          // non-zero if chip uses USBVersion
	0x0200,                     // BCD (0x0200 => USB2)
	255,                          // non-zero if interface is high current
	255,                          // non-zero if interface is high current
	255,                          // non-zero if interface is 245 FIFO
	0,                          // non-zero if interface is 245 FIFO CPU target
	0,                          // non-zero if interface is Fast serial
	0,                          // non-zero if interface is to use VCP drivers
	255,                          // non-zero if interface is 245 FIFO
	0,                          // non-zero if interface is 245 FIFO CPU target
	0,                          // non-zero if interface is Fast serial
	0,                          // non-zero if interface is to use VCP drivers
	//
	// FT232R extensions (Enabled if Version = 2 or greater)
	//
	0,                          // Use External Oscillator
	0,                          // High Drive I/Os
	0,                          // Endpoint size
	0,                          // non-zero if pull down enabled
	0,                          // non-zero if serial number to be used
	0,                          // non-zero if invert TXD
	0,                          // non-zero if invert RXD
	0,                          // non-zero if invert RTS
	0,                          // non-zero if invert CTS
	0,                          // non-zero if invert DTR
	0,                          // non-zero if invert DSR
	0,                          // non-zero if invert DCD
	0,                          // non-zero if invert RI
	0,                          // Cbus Mux control
	0,                          // Cbus Mux control
	0,                          // Cbus Mux control
	0,                          // Cbus Mux control
	0,                          // Cbus Mux control
	255,                          // non-zero if using D2XX drivers
	//
	// Rev 7 (FT2232H) Extensions (Enabled if Version = 3 or greater)
	//
	0,                         // non-zero if pull down enabled
	0,                         // non-zero if serial number to be used
	0,                         // non-zero if AL pins have slow slew
	0,                         // non-zero if AL pins are Schmitt input
	16,                        // valid values are 4mA, 8mA, 12mA, 16mA
	0,                         // non-zero if AH pins have slow slew
	0,                         // non-zero if AH pins are Schmitt input
	16,                        // valid values are 4mA, 8mA, 12mA, 16mA
	0,                         // non-zero if BL pins have slow slew
	0,                         // non-zero if BL pins are Schmitt input
	16,                        // valid values are 4mA, 8mA, 12mA, 16mA
	0,                         // non-zero if BH pins have slow slew
	0,                         // non-zero if BH pins are Schmitt input
	16,                        // valid values are 4mA, 8mA, 12mA, 16mA
	255,                         // non-zero if interface is 245 FIFO
	0,                         // non-zero if interface is 245 FIFO CPU target
	0,                         // non-zero if interface is Fast serial
	0,                         // non-zero if interface is to use VCP drivers
	255,                         // non-zero if interface is 245 FIFO
	0,                         // non-zero if interface is 245 FIFO CPU target
	0,                         // non-zero if interface is Fast serial
	0,                         // non-zero if interface is to use VCP drivers
	0,                         // non-zero if using BCBUS7 to save power for self-powered designs
	//
	// Rev 8 (FT4232H) Extensions (Enabled if Version = 4)
	//
	0,                         // non-zero if pull down enabled
	0,                         // non-zero if serial number to be used
	0,                         // non-zero if AL pins have slow slew
	0,                         // non-zero if AL pins are Schmitt input
	16,                         // valid values are 4mA, 8mA, 12mA, 16mA
	0,                         // non-zero if AH pins have slow slew
	0,                         // non-zero if AH pins are Schmitt input
	16,                         // valid values are 4mA, 8mA, 12mA, 16mA
	0,                         // non-zero if BL pins have slow slew
	0,                         // non-zero if BL pins are Schmitt input
	16,                         // valid values are 4mA, 8mA, 12mA, 16mA
	0,                         // non-zero if BH pins have slow slew
	0,                         // non-zero if BH pins are Schmitt input
	16,                         // valid values are 4mA, 8mA, 12mA, 16mA
	0,                         // non-zero if port A uses RI as RS485 TXDEN
	0,                         // non-zero if port B uses RI as RS485 TXDEN
	0,                         // non-zero if port C uses RI as RS485 TXDEN
	0,                         // non-zero if port D uses RI as RS485 TXDEN
	0,                         // non-zero if interface is to use VCP drivers
	0,                         // non-zero if interface is to use VCP drivers
	0,                         // non-zero if interface is to use VCP drivers
	0                          // non-zero if interface is to use VCP drivers
};

int main( int argc, char *argv[])
{
	FT_STATUS ftStatus;
	FT_HANDLE ftHandle0;
	int iport;
	
	if (argc > 1) {
		sscanf( argv[1], "%d", &iport);
	}
	else {
		iport = 0;
	}

	printf( "Opening port %d\n", iport);
	FT_SetVIDPID( 0x0403, 0x6010);
	ftStatus = FT_Open( iport, &ftHandle0);
	
	if (!FT_SUCCESS(ftStatus)) {
		/* 
			This can fail if the ftdi_sio driver is loaded
		 	use lsmod to check this and rmmod ftdi_sio to remove
			also rmmod usbserial
		 */
		printf( "FT_Open(%d) failed\n", iport);
		return EXIT_FAILURE;
	}

	printf( "ftHandle0 = %p\n", ftHandle0);

	ftStatus = FT_EE_Program( ftHandle0, &Data);
	if (!FT_SUCCESS(ftStatus)) {
		printf( "FT_EE_Program failed (%d)\n", ftStatus);
		FT_Close(ftHandle0);
		return EXIT_FAILURE;
	}

	sleep(1);

	ftStatus = FT_SetBitMode( ftHandle0, 0xFF, FT_BITMODE_RESET);
	if (!FT_SUCCESS(ftStatus)) {
		printf( "Error FT_SetBitMode (%d)\n", ftStatus);
		FT_Close(ftHandle0);
		return EXIT_FAILURE;
	}
/*
	sleep(1);

	ftStatus = FT_SetBitMode( ftHandle0, 0xFF, FT_BITMODE_SYNC_FIFO);
	if (!FT_SUCCESS(ftStatus)) {
		printf( "Error FT_SetBitMode (%d)\n", ftStatus);
		FT_Close(ftHandle0);
		return 1;
	}
*/
	FT_Close(ftHandle0);

	return EXIT_SUCCESS;
}
